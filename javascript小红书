                                                           javaScript
<script>标签有很多属性，本文只介绍一些可能用到了且兼容性较高的属性
  async：立即下载改脚本（外部脚步）
  defer：表示脚本可以延迟到文档完全被解析和显示之后再执行（外部脚步）
  
                                          									typeof
判断变量类型，typeof只是个操作符，并不是个函数，所以在使用的时候可以省略（），typeof null 返回object，所以null代表一个尚未存储值的空对象，在声明一个空对象时，要尽量使用null而不是{}
undefined == null =》 true，注意是==不是===     注意：const a=null; a.b = 'b'会报错，所以想直接在null的基础上扩展时错误的，赋值倒是可以
																														boolean校验
开发中，我们经常会在if中判断一个值是否存在，比如const a = 'a',const a = {},const a = 0,const a
if (a) => ????
上文中，我们已经知道空对象时指null，所以上述声明的a对应的返回值是：true,true,false,false,其实现原理就是他们自动调用了Boolean()方法，该方法是将数据转换为boolean类型，具体对应参考下表：
数据类型				 true						 false
string         非空              空字符串
number         非0和无穷大        0，NaN
object         任何对象           null
																													 浮点类型的数值
浮点数值相加会导致精度损失，例如：0.1+0.2 并不等于0.3
																												   将不同进制的数字转换成10进制
使用parseInt(),例如转换16进制：parseInt('0xAF', 16),第二个参数就是要转换的目标数字的进制数，如果不指定按什么进制解析，在解析一些字符串时会出错，返回NaN
parseFloat()，只解析16进制的数，对于16进制的数字始终都会解析为0，在解析小数时，只会取第一个点，例如：'0.01.2' => 0.01
                                                           10进制数转换为其他进制
使用toString()方法:var num = 10 num.toString(2)二进制，num.toString(8)八进制，num.toString(10)十进制，num.toString(16)十六进制
                                                           ++和--
a++和++a一个前置一个后置的区别，a = 1 a++ console.log(a) =》 2，a = 1 ++a console.log(a) =》 2，这是没有区别的，但是当a++放于一个执行方法里时，例如:console.log(a++) =》1；console.log(++a) =》2


                                                           break和continue，label
label一般时作为for循环的标签，例如：
    let num = 0
    ss: for (let i = 0; i < 10; i++) {
      for (let j = 0; j < 10; j++) {
        if (i == 5 && j == 5) {
          break ss
          // continue ss
        }
        num++
      }
    }
    console.log(num)// ss:break-55,continue-95;break-95,continue-99
    当不使用label时，break和continue只是对他的第一层循环起作用，也就是j的for循环，但是使用label：ss后，就会对两个循环同时起作用。label经常时配合break和continu使用的
                                                          switch语句
当switch里省略break时，语句会在他匹配到的第一个case后，继续执行后续代码，无论他的case是否匹配知道遇到default为止。当然这在某种情况下很有作用。
                                                          do while先执行do再执行while
                                                          数组，对象校验
Array.isArray(value),会返回true或false
                                                          valueOf,toLocaleString方法的作用
							  
							  
							  数组操作方法
	       一、修改原数组
push在数组末尾添加，并返回修改后数组的长度，push方法的参数可以有多项，会分别插入到数组中，使用逗号隔开
unshift在数组前端添加，并返回修改后数组的长度，参数可以有多项，会分别插入到数组中，使用逗号隔开
shift删除数组首项，并返回该项（不是返回删除的数组）
pop方法删除数组尾项，并返回该项
                   排序
reverse，倒序
sort：按照某种格式排序，sort接收一个函数作为参数，参数的大小决定排列的顺序，数组的元素靠前就返回负数，考后就返回正数，否则就返回0，这三者不可少，例如：
      function com(val1,val2) {
          if (val1 < val2) {
	     return -1
	  } else if (val1>val2) {
	     return 1
	  } else {
	     return 0
	  }
      }               var arr = [1,3,7,2,5] console.log(arr.sort(com))
      比较大小简化版：function coms(val1,val2){ return val1-val2 }
             二、复制数组，不会改变原数组，会返回一个新数组
concat:合并数组方法，参数可以是一个元素或者时一个数组，也能拼着用逗号隔开传入，
slice:截取数组并返回被截取的新数组，接收两个参数（起始和结束位置），都代表下标位置，也可传一个参数，代表从什么地方开始截取到末尾结束，若传的都是负数则从右往左数起始位置和结束位置。注意：第一个参数应该始终小于第二个参数，-1是数组最后一项,若穿的参数是（-1，-2），则截取不到，因为本身参数就传错了
             三、修改数组，会修改原数组，删除的项组成新的数组并返回，没有删除就返回空数组
splice：方法，接收3个参数，第一个参数是位置，第二个代表长度，第三个，第四个第五个....代表新元素（前两个参数已传的前提下），经常用于删除，插入，替换修改。
        删除：只传前两个参数就是删除功能，会删除数组指定的项，删除的项组成新的数组并返回
	 插入：三个参数全传，第二个参数传0就是插入
	 替换：三个参数全传，第二个参数不为0就是替换
             四：位置
indexOf,lastIndexOf:返回某一元素在数组中的位置，lastIndexOf从后开始查询
             五、es5新增的数组操作方法
every：只有所有元素都返回true的时候返回true
some:只要有任一元素返回true就返回true
filter:返回符合函数方法的元素组成的数组
map：返回经过函数操作过的数组
forEach：类似for循环
reduce:可以用来求数组所以元素之和，有四个参数，分别是prev, cur, index, array,代表上一次返回值，当前元素，当前元素下标，数组本身。prev每次都是上一次循环后的返回值，当然，在第一次循环没有返回值，所以第一次循环的prev是数组第一项，且第一次循环的cur是数组第二项，也就是数组只循环执行了arr.length-1次。reduceRight是反向循环
             
	     
	                                        function函数
在函数内部有arguments和this，arguments代码函数的参数对象，这个对象还有个属性叫callee，它代表着这个函数本身，例如
              function count(num) {
	       console.log(count.caller)
	       console.log(arguments.callee.caller)
	       if (num<=1){return 1}else{
	        return num * count(num - 1)
	       }
	      }    像这种写法，当函数名改变的时候就会报错，而执行不下去。但是换成callee,就没问题了
	      function count(num) {
	       if (num<=1){return 1}else{
	        return num * arguments.callee(num - 1)
	       }
	      }
es5新增了caller属性，作用是保存着调用此函数的引用。比如this.count，在count内部打印count.caller或arguments.callee.caller就是指向this对象。若是在函数内部调用count，count内部打印count.caller或arguments.callee.caller就是指向count的父级函数

在function声明的函数中，this是undefined，所以如果想给this赋以具体的值,并将this传递给调用它的函数本身，就可以使用apply或者call方法。这两种方法的作用是一样的，只是在不同场景下哪个方便的问题，区别仅在于传参的方式，例如：
              function count(num1,num2) {
	       console.log(this)
	       return num1 + num2
	      }
	      count(10,10)   => undefined, 20
	      count.call(window,10,10)   => window, 20
	      count.call(this,10,10)   => window, 20
	      
	      function count2(num1,num2) {
	       return count.apply(this, arguments)
	      }
	      count2.call(this, 10, 10)
	  apply于call方法的第一个参数都是this的值，区别apply的第二个参数是arguments对象，而call是将参数直接传给函数。当然在函数不接收参数的时候，以上两种方法没有区别，但是在函数内部调用函数时，便于this的传递，使用apply可能会更加方便。这里我传的都是this，也可以传一个对象，这个无所谓.
	  bind方法，是用于创建一个新函数实例，并为这个函数指定this指针，例如：
	  var o = { color: 'red' }
          function count3(num1, num2) {
           console.log(this.color)
           return num1 + num2
          }
          var fun = count3.bind(o) // fun就是新的函数实例
          console.log(fun(10, 20)) // red
	  apply于call方法的第一个参数都是this的值，区别apply的第二个参数是arguments对象，而call是将参数直接传给函数。当然在函数不接收参数的时候，以上两种方法没有区别，但是在函数内部调用函数时，便于this的传递，使用apply可能会更加方便。这里我传的都是this，也可以传一个对象，这个无所谓.，
	  apply于call方法的第一个参数都是this的值，区别apply的第二个参数是arguments对象，而call是将参数直接传给函数。当然在函数不接收参数的时候，以上两种方法没有区别，但是在函数内部调用函数时，便于this的传递，使用apply可能会更加方便。这里我传的都是this，也可以传一个对象，这个无所谓.
