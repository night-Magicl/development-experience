<template>
  <div id="global-uploader" :class="[collapse?'collapse':'']">
    <!-- 上传 -->
    <uploader
      ref="uploader"
      :options="options"
      :auto-start="false"
      class="uploader-app"
      @file-added="onFileAdded"
      @file-success="onFileSuccess"
      @file-progress="onFileProgress"
      @file-error="onFileError"
    >
      <uploader-unsupport />

      <!-- <uploader-btn>选择文件</uploader-btn> -->
      <uploader-btn id="global-uploader-btn" ref="uploadBtn" :attrs="attrs">选择文件</uploader-btn>

      <uploader-list v-show="panelShow">
        <div slot-scope="props" :class="['file-panel',collapse?'collapse':'']">
          <div class="file-title">
            <p>上传文件列表</p>
            <div class="operate">
              <el-button type="text" :icon="collapse?'el-icon-d-caret':'el-icon-minus'" :title="collapse?'放大':'缩小'" @click="collapse = !collapse" />
              <el-button type="text" icon="el-icon-close" title="关闭并中断上传" @click="close" />
            </div>
          </div>

          <ul class="file-list">
            <li v-for="file in props.fileList" :key="file.id">
              <uploader-file ref="files" :class="'file_' + file.id" :file="file" :list="true" />
            </li>
            <div v-if="!props.fileList.length" class="no-file"><i class="iconfont icon-empty-file" /> 暂无待上传文件</div>
          </ul>
        </div>
      </uploader-list>

    </uploader>

  </div>
</template>

<script>
/**
     *   全局上传插件
     *   调用方法：this.$emit('openUploader', {}) 打开文件选择框，参数为需要传递的额外参数
     *   监听函数：this.$on('fileAdded', fn); 文件选择后的回调
     *            this.$on('fileSuccess', fn); 文件上传成功的回调
     */

// 参考文档：https://www.cnblogs.com/xiahj/p/vue-simple-uploader.html#2-%E5%85%B3%E4%BA%8Evue-simple-uploader
import SparkMD5 from 'spark-md5'
const ACCEPT_CONFIG = {
  image: ['.png', '.jpg', '.jpeg', '.gif', '.bmp'],
  video: ['.mp4', '.rmvb', '.mkv', '.wmv', '.flv'],
  document: ['.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx', '.pdf', '.txt', '.tif', '.tiff'],
  getAll() {
    return [...this.image, ...this.video, ...this.document]
  }
}
export default {
  components: {},
  data() {
    return {
      options: {
        target: `${this.$root1}/admin/anchor/voice/fileUpload`,
        simultaneousUploads: 5,
        chunkSize: '5242880',
        fileParameterName: 'file',
        maxChunkRetries: 3,
        testChunks: true, // 是否开启服务器分片校验
        // 服务器分片校验函数，秒传及断点续传基础
        checkChunkUploadedByResponse: function(chunk, message) {
          const objMessage = JSON.parse(message)
          console.log(message)
          if (objMessage.data.skipUpload) {
            return true
          }

          // return (objMessage.uploaded || []).indexOf(chunk.offset + 1) >= 0
        },
        headers: {
          // Authorization: Ticket.get() && 'Bearer ' + Ticket.get().access_token
        },
        query() {}
      },
      attrs: {
        accept: ACCEPT_CONFIG.getAll()
      },
      panelShow: false, // 选择文件后，展示上传panel
      collapse: false,
      params: {}
    }
  },
  computed: {
    // Uploader实例
    uploader() {
      return this.$refs.uploader.uploader
    },
    openUploader() {
      return this.$store.state.globalUpload.openUploader
    }
  },
  watch: {
    openUploader(newValue) {
      if (newValue) {
        this.$nextTick(() => {
          document.getElementById('global-uploader-btn').click()
          this.params = this.$store.state.globalUpload.query
          this.$store.commit('SET_OpenUploader', { openUploader: false })
        })
      }
    }
  },
  mounted() {
  },
  destroyed() {
    // this.$off('openUploader')
  },
  methods: {
    onFileAdded(file) {
      this.panelShow = true
      this.computeMD5(file)
      // this.$emit('fileAdded')
    },
    onFileProgress(rootFile, file, chunk) {
      // console.log(file)
      // console.log(`上传中 ${file.name}，chunk：${chunk.startByte / 1024 / 1024} ~ ${chunk.endByte / 1024 / 1024}`)
    },
    onFileSuccess(rootFile, file, response, chunk) {
      const res = JSON.parse(response)
      // 服务器自定义的错误（即虽返回200，但是是错误的情况），这种错误是Uploader无法拦截的
      if (res.code == 200 || res.flag) {
        this.$message({ message: file.name + '上传成功', type: 'success' })
      } else {
        this.$message({ message: res.message, type: 'error' })
        // 文件状态设为“失败”
        // this.statusSet(file.id, 'failed')
        return
      }

      // 如果服务端返回需要合并
      // if (res.needMerge) {
      //   // 文件状态设为“合并中”
      //   this.statusSet(file.id, 'merging')

      //   api.mergeSimpleUpload({
      //     tempName: res.tempName,
      //     fileName: file.name,
      //     ...this.params
      //   }).then(res => {
      //     // 文件合并成功
      //     this.$emit('fileSuccess')

      //     this.statusRemove(file.id)
      //   }).catch(e => {})

      //   // 不需要合并
      // } else {
      //   // this.$emit('fileSuccess')
      //   console.log('上传成功')
      // }
    },
    onFileError(rootFile, file, response, chunk) {
      this.$message({
        message: response,
        type: 'error'
      })
    },

    /**
             * 计算md5，实现断点续传及秒传
             * @param file
             */
    computeMD5(file) {
      const fileReader = new FileReader()
      // const time = new Date().getTime()
      const blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice
      let currentChunk = 0
      const chunkSize = this.chunkSize
      // const chunkSize = 10 * 1024 * 1000
      const chunks = Math.ceil(file.size / chunkSize)
      const spark = new SparkMD5.ArrayBuffer()

      // 文件状态设为"计算MD5"
      // this.statusSet(file.id, 'md5')
      file.pause()

      loadNext()

      fileReader.onload = e => {
        spark.append(e.target.result)
        if (currentChunk < chunks) {
          currentChunk++
          loadNext()

          // 实时展示MD5的计算进度
          this.$nextTick(() => {
            // $(`.myStatus_${file.id}`).text('校验MD5 ' + ((currentChunk / chunks) * 100).toFixed(0) + '%')
          })
        } else {
          const md5 = spark.end()
          this.computeMD5Success(md5, file)
          // console.log(`MD5计算完毕：${file.name} \nMD5：${md5} \n分片：${chunks} 大小:${file.size} 用时：${new Date().getTime() - time} ms`)
        }
      }

      fileReader.onerror = function() {
        this.error(`文件${file.name}读取出错，请检查该文件`)
        file.cancel()
      }

      function loadNext() {
        const start = currentChunk * chunkSize
        const end = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize

        fileReader.readAsArrayBuffer(blobSlice.call(file.file, start, end))
      }
    },

    computeMD5Success(md5, file) {
      // 将自定义参数直接加载uploader实例的opts上
      Object.assign(this.uploader.opts, {
        query: {
          ...this.params
        }
      })

      file.uniqueIdentifier = md5
      file.resume()
      // this.statusRemove(file.id)
    },
    close() {
      this.uploader.cancel()
      this.panelShow = false
    },

    /**
             * 新增的自定义的状态: 'md5'、'transcoding'、'failed'
             * @param id
             * @param status
             */
    statusSet(id, status) {
      // const statusMap = {
      //   md5: {
      //     text: '校验MD5',
      //     bgc: '#fff'
      //   },
      //   merging: {
      //     text: '合并中',
      //     bgc: '#e2eeff'
      //   },
      //   transcoding: {
      //     text: '转码中',
      //     bgc: '#e2eeff'
      //   },
      //   failed: {
      //     text: '上传失败',
      //     bgc: '#e2eeff'
      //   }
      // }

      // this.$nextTick(() => {
      //   $(`<p class="myStatus_${id}"></p>`).appendTo(`.file_${id} .uploader-file-status`).css({
      //     'position': 'absolute',
      //     'top': '0',
      //     'left': '0',
      //     'right': '0',
      //     'bottom': '0',
      //     'zIndex': '1',
      //     'backgroundColor': statusMap[status].bgc
      //   }).text(statusMap[status].text)
      // })
    },
    statusRemove(id) {
      this.$nextTick(() => {
        // $(`.myStatus_${id}`).remove()
      })
    },

    error(msg) {
      this.$notify({
        title: '错误',
        message: msg,
        type: 'error',
        duration: 2000
      })
    }
  }
}
</script>

<style scoped lang="scss">
#global-uploader {
  position: fixed;
  z-index: 9999;
  right: 20px;
  bottom: 20px;
  &.collapse {
    width: 170px;
    height: 40px;
    border-radius: 7px;
    border: 1px solid #e2e2e2;
    overflow: hidden;
  }
  .uploader-app {
      width: 520px;
  }
  /deep/ .el-button {
    font-size: 20px;
  }

  .file-panel {
    background-color: #fff;
    border: 1px solid #e2e2e2;
    border-radius: 7px 7px 0 0;
    box-shadow: 0 0 10px rgba(0, 0, 0, .2);

    .file-title {
      display: flex;
      align-items: center;
      height: 40px;
      padding: 0 15px;
      border-bottom: 1px solid #ddd;
      p {
        font-size: 14px;
        font-weight: bold;
      }
      .operate {
        flex: 1;
        text-align: right;
      }
    }

    .file-list {
      position: relative;
      height: 240px;
      overflow-x: hidden;
      overflow-y: auto;
      background-color: #fff;

      > li {
        background-color: #fff;
      }
    }
  }
  .collapse {
    width: 170px;
    border: none;
    .file-title {
      // background-color: #E7ECF2;
    }
    /deep/ .el-button {
      font-size: 16px;
    }
  }

  .no-file {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 16px;
  }

  /deep/.uploader-file-icon {
    &:before {
        content: '' !important;
    }

    &[icon=image] {
        background: url(../../assets/images/image-icon.png);
    }
    &[icon=video] {
        background: url(../../assets/images/video-icon.png);
    }
    &[icon=document] {
        background: url(../../assets/images/text-icon.png);
    }
  }

  /deep/.uploader-file-actions > span {
      margin-right: 6px;
  }
}

/* 隐藏上传按钮 */
#global-uploader-btn {
    position: absolute;
    clip: rect(0, 0, 0, 0);
}

ul {
  padding: 0;
  margin: 0;
  li {
    list-style-type: none;
  }
}

</style>
